@using Resources;
@{
    if (!Request["lang"].IsEmpty())
    {
        Culture = UICulture = Request["lang"];
    }
    ViewBag.Title = LabelResources.SignInPageTitleText;
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    @*
    <link rel="shortcut icon" href="../../docs-assets/ico/favicon.png">*@

    <title>Signin</title>
</head>
<body>
    <div id="fb-root"></div>
    <script>
      
    </script>
    <script id="customMessageTemplate" type="text/html">
        <p data-bind="validationMessage: field"></p>
    </script>

    <div id="dialog-form" class="container" hidden title="@LabelResources.SignInPageTitleText">
        <form class="form-signin" role="form">
            <table>
                <tr>
                    <td style="width: 50%">
                        <fb:login-button show-faces="true" width="200" max-rows="1" scope="user_photos,email"></fb:login-button>
                    </td>
                    <td style="width: 50%">
                        @*<h2 class="form-signin-heading">Please sign in</h2>*@
                        <div>
                            <button class="btn btn-lg btn-primary btn-block" id="btnNewUser" data-bind="click: ToggleNewUser">@LabelResources.NewUserQuestionText</button>
                            <button class="btn btn-lg btn-primary btn-block" id="btnExistingUser" data-bind="click: ToggleExistingUser">@LabelResources.ExistingUserQuestionText</button>
                        </div>
                        <div>
                            <p id="infoMessages" class="message-error"></p>
                            @*
                            <ul>
                                <li data-bind="validationMessage: EmailAddress"></li>
                                <li data-bind="validationMessage: Password"></li>
                                <li data-bind="validationMessage: ConfirmPassword"></li>
                            </ul>*@
                        </div>
                        <div data-bind='validationOptions: { messageTemplate: "customMessageTemplate" }'>
                            <p></p>
                            <input type="text" data-bind="value: EmailAddress" class="form-control" id="EmailAddress" placeholder="@LabelResources.EmailPlaceholderText">
                            <p></p>
                            <input type="password" data-bind="value: Password" class="form-control" id="Password" placeholder="@LabelResources.PasswordPlaceolderText">
                            <p></p>
                            <input placeholder="@LabelResources.ConfirmPasswordPlaceholderText" class="form-control" type="password" data-bind="value: ConfirmPassword, visible: NewUser" id="divConfirmPassword" />
                        </div>
                        <div>
                            <p></p>
                            <button data-bind="click: SignIn" class="btn btn-lg btn-primary btn-block" type="submit">@LabelResources.SignInButtonText</button>

                        </div>
                    </td>
                </tr>
            </table>
        </form>
    </div>
    <!-- /container -->
    <div id="loading">
    </div>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/knockout-validation")
    @Scripts.Render("~/bundles/bootstrap")
    <link rel="stylesheet" href="~/Content/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="~/Content/style.css">
    <link rel="stylesheet" href="~/Content/CustomCore.css">
    @Scripts.Render("~/Scripts/jquery-ui-1.10.3.js")
    @Scripts.Render("~/Scripts/GlobalResources.js")
    @Scripts.Render("~/Scripts/knockout.mapping-latest.js")
    @Scripts.Render("~/Scripts/Custom.js")
    @Scripts.Render("~/Scripts/User/LoginViewModel.js")
</body>
</html>
<script>

    $(document).ready(function () {
        window.fbAsyncInit = function () {
            FB.init({
                appId: '577796618941784',
                status: true, // check login status
                cookie: true, // enable cookies to allow the server to access the session
                xfbml: true  // parse XFBML
            });

            var selfModel = new UserLoginViewModel();
            ko.applyBindings(selfModel);
            // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
            // for any authentication related change, such as login, logout or session refresh. This means that
            // whenever someone who was previously logged out tries to log in again, the correct case below 
            // will be handled. 
            FB.Event.subscribe('auth.authResponseChange', function (response) {
                // Here we specify what we do with the response anytime this event occurs. 
                if (response.status === 'connected') {
                    // The response object is returned with a status field that lets the app know the current
                    // login status of the person. In this case, we're handling the situation where they 
                    // have logged in to the app.
                    //testAPI();
                    //response.authResponse.signedRequest
                    selfModel.loginWithFaceBook(response.authResponse.userID, response.authResponse.accessToken);
                } else if (response.status === 'not_authorized') {
                    // In this case, the person is logged into Facebook, but not into the app, so we call
                    // FB.login() to prompt them to do so. 
                    // In real-life usage, you wouldn't want to immediately prompt someone to login 
                    // like this, for two reasons:
                    // (1) JavaScript created popup windows are blocked by most browsers unless they 
                    // result from direct interaction from people using the app (such as a mouse click)
                    // (2) it is a bad experience to be continually prompted to login upon page load.
                    FB.login();
                } else {
                    // In this case, the person is not logged into Facebook, so we call the login() 
                    // function to prompt them to do so. Note that at this stage there is no indication
                    // of whether they are logged into the app. If they aren't then they'll see the Login
                    // dialog right after they log in to Facebook. 
                    // The same caveats as above apply to the FB.login() call here.
                    FB.login();
                }
            });
        };

        // Load the SDK asynchronously
        (function (d) {
            var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
            if (d.getElementById(id)) { return; }
            js = d.createElement('script'); js.id = id; js.async = true;
            js.src = "//connect.facebook.net/en_US/all.js";
            ref.parentNode.insertBefore(js, ref);
        }(document));

        $("#dialog-form").dialog("open");
        $("#dialog-form").show();

    });

    $("#dialog-form").dialog({
        autoOpen: false,
        height: 400,
        width: 600,
        modal: true,
    });

</script>
